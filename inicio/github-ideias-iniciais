Sobre repositórios

Para criar um novo repositório, vá para https://github.com/new

Criar um arquivo LEIAME
Para que as pessoas possam entender e navegar mais facilmente por seu trabalho, crie um arquivo LEIAME para cada repositório
- a minha area pessoal no github tem repositorios

- Repositorio é uma pasta grande, que pode ser estruturada de forma hierárquica com arquivos, arquivos markdown, outros arquivos
- não vou forçar o uso nesses repositorios, buscar alternativas na nuvem como dropbox, drive, onedrive, etc;
- criar aquivos de texto dentro do repositorio;
- para o arquivo ser markdown, usar o .md
- para criar uma pasta, usar o SLASH (/) e criar um arquivo dentro da pasta;
- posso tornar o repositorio um template

- IDEIAS DE OUTROS REPOSITORIOS
primeiro de tudo  é um bom README com descrição, títulos, categorizado, explicando bem o que está no repositorio; uma WIKI;
- pastas
- pastas linkadas ao readme
- ideia para o readme:
Documentação Técnica
O arquivo README deve ser visto como um ponto de partida e dentro dele deve haver links para leva-lo a documentações mais complexas que detalham processos mais especificos. Como organizar seu README:

📁 Crie uma pasta chamada docs e ter um docs/README.md.

Na verdade o que eu tenho que aprender a fazer é o wiki

💡 Ideias para docs:
⚙️ installation.md - Aqui você pode detalhar todo o processo de instalação como se fosse a primeira vez da pessoa utilizando o projeto.
👀 usage.md - visão detalhada sobre comandos e outros detalhes de como utilizar o projeto.
🚀 advanced.md - Documento para assuntos mais específicos do projeto.
🤝 contributing.md - esse documento deve conter as orientações necessárias para caso alguém queria contribuir com o projeto, independente da forma.
👔 code_of_conduct.md - o código de conduta informa os usuários de expectativas para sua conduta enquanto participante da comunidade formada ao redor do projeto. leia mais
📜 license - Esse documento deve conter os detalhes sobre a licença do seu projeto.

- link no readme p/ project: com todo, progress, done;
-----//----------
1. Markdown Files (.md)
Você pode criar arquivos em formato Markdown diretamente nos repositórios do GitHub. O Markdown é um formato de texto leve que permite a formatação simples, como títulos, listas e links, facilitando a organização de suas anotações.
Esses arquivos podem ser organizados em diferentes diretórios, simulando um sistema de anotações hierárquico.
2. Issues e Pull Requests
Outra forma é usar a seção de Issues ou Pull Requests do repositório. Embora esses recursos sejam normalmente usados para rastrear bugs ou novas funcionalidades, você pode utilizá-los como anotações, pois é possível adicionar rótulos, comentários e até vincular arquivos.
3. GitHub Wiki
GitHub oferece um recurso de Wiki para cada repositório. Esse recurso é ótimo para organizar informações de maneira hierárquica e é fácil de navegar. É semelhante a um wiki tradicional, onde você pode criar várias páginas interligadas.
4. Gists
O GitHub também tem um recurso chamado Gists, que permite criar pequenos fragmentos de código ou notas. Um Gist pode ser público ou privado e pode ser uma opção rápida para anotações menores ou fragmentadas.



-------//---------
GITHUB ISSUES
- Para criar um problema, você precisa de um repositório.
- Primeiro, crie um problema. Existem várias maneiras de criar um problema.
ex. página principal do repositório > Problemas > novo problema
- titulo; descrição explicando;
- pode usar markdown
- criar uma lista de tarefas simples usando [ ] no corpo do texto do problema
- add etiquetas: categorizar o problema, no lado direito
- pode add marcos-milestones: mostra o progresso a medida que se aproxima do prazo: no marco posso colocar uma descrição, com informações como uma visão do rojeto, prazos do projeto, prazo do marco, porcentagem de conclusão do marco, numero de problemas ligados ao marco, lista de problemas ligados ao marco
- posso add o problema a um projeto existente

GITHUB PROJECTS

- Um projeto é uma coleção adaptável de itens que você pode exibir como uma tabela, um quadro kanban ou um roteiro e que permanece atualizado com dados da GitHub. 
- criar projeto: your profile - projects - new project - seleciona o modelo - pode escolher os campos de metadados que quer;
- crie um arquivo README - detalhar a finalidade do projeto, instruçoes sobre como usar e incluir links relevantes; 
- posso add uma breve descrição no inicio do projeto - sem ser no README
- O readme tem markdown
- Seus projetos podem acompanhar problemas, solicitações de pull e ideias que você anotar.
- Um projeto pode ficar dentro ou fora de um repositorio, mas não precisa necessariamente estar ligado a um arquivo, são seções autonomas;
- Num projeto, posso converter um item no ISSUE - para ser issue precisa estar num repositorio
- Num projeto, cada célula tem vários itens, pra filtrar, como se fosse uma tabela ou kanban; os itens que eu achei interessantes, dos que já vem: status, label(ligada a issue), repository pra ver se a celula está ligada a algum repositorio;
- alem disso posso criar colunas especificas conforme o meu gosto e os parametros dessa coluna podem ser em texto livre, numero, select ou data;
- criar um campo personalizado prioridade select c os valores alta media baixa
- dentro de uma celula do project eu posso add textos descritivos, ou colocar arquivos(ressalva do armazenamento de arquivos do github)
- pra fazer uma lista de tarefas dentro de uma celula nos projetos, é recomendado usar [ ]
- tem as visões de tabela, kanban, roadmap
- no projeto, posso arquivar as celulas conforme a necessidade, tambem posso deletar;
- um projeto pode ter status aberto ou fechado; acho que se terminar posso encerrar um projeto, ou fechar um projeto termporariamente e depois abrir; 
- no lado do nome do projeto, posso clicar - agrupar - prioridade para facilitar o foco nos itens de alta prioridade; salvar alteraçoes para essa visualização ficar;
- consigo pesquisar pelos projetos; eles podem ser da conta ou dos repositorios da conta:
- sintaxe de pesquisa dos projetos: 
is:open	Retorna projetos que estão abertos no momento.
is:closed	Retorna projetos que estão fechados no momento.
is:template	Retorna projetos marcados como um modelo.
is:private	Retorna projetos definidos como visibilidade privada.
is:public	Retorna projetos definidos como visibilidade pública.
creator:USERNAME	Retorna projetos criados por USERNAME. Por exemplo, creator:octocat retornará projetos criados por @octocat.
- alterar a ordenação dos projetos:
sort:title-asc	Ordenar por título de projeto.
sort:updated-asc ou sort:updated-desc	Classificar pelo horário da última atualização.
sort:created-asc ou sort:created-desc	Classificar por quando o projeto foi criado.

- LISTS
Fica dentro da parte de estrelas;
serve para classificar os repositorios; de forma ainda maior, uma hierarquia superior;

- GIST -no github
gists no GitHub são uma maneira simples de compartilhar trechos de código com outras pessoas. Cada gist é um repositório Git, o que significa que ele pode ser bifurcado e clonado
- Os gists são usados para manter pedaços de código (snippets) que não são específicos de nenhuma aplicação ou não são tão importantes a ponto de terem um repositório dedicado. Geralmente, as pessoas usam gists para compartilhar (ou manter em um local único) códigos que usam com frequência.
Para fazer o download de um gist, basta cloná-lo ou baixar os arquivos diretamente do próprio gist2.
- Preciso anotar alguma coisa aleatoria rapidamente, que nao ta estruturada nos eixos que eu ja tenho nos repositorios? Uso o GITHUB GIST; E se precisar colocar print? adiciono .md no nome do arquivo e consigo colar os prints sem nem sequer precisar salvar, após commit eles aparecem no arquivo

- GITHUB PROJETOS - mt pica, vai ser minha tasklist agora;

- Mudar arquivos dentro de uma pasta no diretório é na parte de editar, voltar o nome e escrever o nome do diretório certo; NÃO dá pra mudar pra outro diretório; acho que só baixando o arquivo e add no outro espaço;

- Ver se precisa limpar commits - fazer uma limpeza se precisar, para deixar mais leve

### COMO USAR TEMPLATES E COPIAR PASTAS? 

- Criar um diretorio(pasta) dentro de um repositório para usar como template;
ex.
templates/
   ├── template_a/
   └── template_b/
- Baixar a pasta desejada
- duplica-la localmente
- fazer upload no github web: Add file > Upload files.

  ### Criar template: 

baixar pasta template do github usando um dos sites, 
para o desktop
depois upar ela dentro da pasta que eu quero replicar
pegar o template no desktop, duplicar, mudar o nome que eu quero usar, e ja mandar p github com o nome da pasta certo pq la nao da p alterar

/obs: assim vai dar certo aquele maior problema que eu tinha em ter que criar varias vezes os mesmos docs - isso nao vai mais precisar ser feito










